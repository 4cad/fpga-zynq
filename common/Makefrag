# This makefrag is sourced by each board's subdirectory

JOBS = 16
base_dir = $(abspath ..)
output_delivery = deliver_output

ifneq ($(BOARD_MODEL),)
    insert_board = s/\# REPLACE FOR OFFICIAL BOARD NAME/set_property "board" "$(BOARD_MODEL)"/g
endif

verilog_srcs = \
	src/verilog/clocking.vh \
	src/verilog/rocketchip_wrapper.v \
	src/verilog/Top.$(CHISEL_CONFIG).v \


default: project



# Specialize sources for board
src/verilog/rocketchip_wrapper.v: $(base_dir)/common/rocketchip_wrapper.v
	cp $(base_dir)/common/rocketchip_wrapper.v src/verilog/

src/tcl/$(BOARD)_rocketchip.tcl: $(base_dir)/common/zynq_rocketchip.tcl Makefile
	sed 's/BOARD_NAME_HERE/$(BOARD)/g;s/PART_NUMBER_HERE/$(PART)/g;$(insert_board);s/CHISEL_CONFIG_HERE/$(CHISEL_CONFIG)/g' $(base_dir)/common/zynq_rocketchip.tcl > src/tcl/$(BOARD)_rocketchip.tcl

src/tcl/make_bitstream.tcl: $(base_dir)/common/make_bitstream.tcl
	sed 's/BOARD_NAME_HERE/$(BOARD)/g' $(base_dir)/common/make_bitstream.tcl > src/tcl/make_bitstream.tcl

# no dependencies so it has to be manually called
# (don't want to clobber local verilog by accident)
rocket:
	cd $(base_dir)/rocket-chip/fsim; make verilog CONFIG=$(CHISEL_CONFIG); cp generated-src/Top.$(CHISEL_CONFIG).v $(base_dir)/$(BOARD)/src/verilog



# Project generation
$(BOARD)_rocketchip/$(BOARD)_rocketchip.xpr: src/verilog/rocketchip_wrapper.v src/tcl/$(BOARD)_rocketchip.tcl
	vivado -mode tcl -source src/tcl/$(BOARD)_rocketchip.tcl

$(BOARD)_rocketchip/$(BOARD)_rocketchip.runs/impl_1/rocketchip_wrapper.bit: $(BOARD)_rocketchip/$(BOARD)_rocketchip.xpr src/tcl/make_bitstream.tcl $(verilog_srcs) src/constrs/base.xdc
	vivado -mode tcl -source src/tcl/make_bitstream.tcl

project: $(BOARD)_rocketchip/$(BOARD)_rocketchip.xpr

vivado: $(BOARD)_rocketchip/$(BOARD)_rocketchip.xpr
	vivado $(BOARD)_rocketchip/$(BOARD)_rocketchip.xpr &

bitstream: $(BOARD)_rocketchip/$(BOARD)_rocketchip.runs/impl_1/rocketchip_wrapper.bit

arm_linux_dir = $(base_dir)/common/linux-xlnx
uboot_dir = $(base_dir)/common/u-boot-xlnx
soft_build_dir = soft_build

# software builds
arm-linux: arm-uboot # must first build uboot because we need tools
	# compile kernel
	git submodule update --init --depth=1 $(arm_linux_dir)
	# no make clean included here since one copy of linux should work on all boards
	cd $(arm_linux_dir) && make ARCH=arm CROSS_COMPILE=arm-xilinx-linux-gnueabi- xilinx_zynq_defconfig 
	cd $(arm_linux_dir) && make ARCH=arm CROSS_COMPILE=arm-xilinx-linux-gnueabi- -j$(JOBS)
	# convert zImage to uImage
	cd $(arm_linux_dir) && export PATH=$(uboot_dir)/tools:$$PATH && make ARCH=arm CROSS_COMPILE=arm-xilinx-linux-gnueabi- UIMAGE_LOADADDR=0x8000 uImage
	mkdir -p $(output_delivery)
	cp $(arm_linux_dir)/arch/arm/boot/uImage $(output_delivery)/

arm-uboot:
	# compile board-compatible u-boot
	git submodule update --init --depth=1 $(uboot_dir)
	# copy relevant configuration files
	if [ -a soft_config/boards.cfg ] ; \
	then \
	    cp soft_config/boards.cfg $(uboot_dir)/ ; \
	fi;
	cp soft_config/zynq_$(UBOOT_CONFIG).h $(uboot_dir)/include/configs/
	# actually build
	cd $(uboot_dir) && make CROSS_COMPILE=arm-xilinx-linux-gnueabi- zynq_$(UBOOT_CONFIG)_config
	cd $(uboot_dir) && make CROSS_COMPILE=arm-xilinx-linux-gnueabi- -j$(JOBS)
	mkdir -p $(soft_build_dir)
	cp $(uboot_dir)/u-boot $(soft_build_dir)/u-boot.elf

# Handle images and git submodule for prebuilt modules
fpga-images-$(BOARD)/boot.bif:
	git submodule update --init --depth=1 fpga-images-$(BOARD)

fpga-images-$(BOARD)/boot.bin: fpga-images-$(BOARD)/boot.bif $(BOARD)_rocketchip/$(BOARD)_rocketchip.runs/impl_1/rocketchip_wrapper.bit
	cd fpga-images-$(BOARD); bootgen -image boot.bif -w -o boot.bin

fetch-images: fpga-images-$(BOARD)/boot.bif

load-sd: fpga-images-$(BOARD)/boot.bin
	$(base_dir)/common/load_card.sh $(SD)

ramdisk-open: fpga-images-$(BOARD)/boot.bif
	mkdir ramdisk
	dd if=fpga-images-$(BOARD)/uramdisk.image.gz  bs=64 skip=1 | \
	gunzip -c | sudo sh -c 'cd ramdisk/ && cpio -i'

ramdisk-close:
	@if [ ! -d "ramdisk" ]; then \
		echo "No ramdisk to close (use make ramdisk-open first)"; \
		exit 1; \
	fi
	sh -c 'cd ramdisk/ && sudo find . | sudo cpio -H newc -o' | gzip -9 > uramdisk.cpio.gz
	mkimage -A arm -O linux -T ramdisk -d uramdisk.cpio.gz fpga-images-$(BOARD)/uramdisk.image.gz
	rm uramdisk.cpio.gz
	@echo "Don't forget to remove ramdisk before opening it again (sudo rm -rf ramdisk)"

clean:
	rm -f *.log *.jou

.PHONY: rocket project vivado bitstream fetch-images load-sd clean ramdisk-open ramdisk-close
